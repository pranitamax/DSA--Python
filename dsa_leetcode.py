# -*- coding: utf-8 -*-
"""DSA_leetcode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KcwrmlcY14JPydl0xRsxvKLoyXTO0WNZ
"""

def product_except_self(nums):
    n = len(nums)
    answer = [1] * n

    left_product = 1
    for i in range(n):
        answer[i] = left_product
        left_product *= nums[i]

    right_product = 1
    for i in range(n - 1, -1, -1):
        answer[i] *= right_product
        right_product *= nums[i]

    return answer

# Test Cases
print(product_except_self([1,2,3,4]))
print(product_except_self([-1,1,0,-3,3]))

def length_of_longest_substring(s: str) -> int:
    char_index = {}
    left = 0
    max_length = 0

    for right in range(len(s)):
        if s[right] in char_index and char_index[s[right]] >= left:
            left = char_index[s[right]] + 1

        char_index[s[right]] = right
        max_length = max(max_length, right - left + 1)

    return max_length

print(length_of_longest_substring("abcabcbb"))
print(length_of_longest_substring("bbbbb"))
print(length_of_longest_substring("pwwkew"))